{
    "questions": [
        {
            "id": 1,
            "title": "Variable Manipulation Sequence",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "int x = 5;\nint y = 3;\nx *= 2;\ny += x;\nx = y - x;\nSystem.out.println(x + y);",
                    "answers": [
                        {"text": "16", "correct": true},
                        {"text": "13", "correct": false},
                        {"text": "18", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "x becomes 10 (5*2), y becomes 13 (3+10), x becomes 3 (13-10), final sum is 16 (3+13)"
                },
                "python": {
                    "code": "x = 5\ny = 3\nx *= 2\ny += x\nx = y - x\nprint(x + y)",
                    "answers": [
                        {"text": "16", "correct": true},
                        {"text": "13", "correct": false},
                        {"text": "18", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "x becomes 10 (5*2), y becomes 13 (3+10), x becomes 3 (13-10), final sum is 16 (3+13)"
                },
                "javascript": {
                    "code": "let x = 5;\nlet y = 3;\nx *= 2;\ny += x;\nx = y - x;\nconsole.log(x + y);",
                    "answers": [
                        {"text": "16", "correct": true},
                        {"text": "13", "correct": false},
                        {"text": "18", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "x becomes 10 (5*2), y becomes 13 (3+10), x becomes 3 (13-10), final sum is 16 (3+13)"
                }
            }
        },
        {
            "id": 2,
            "title": "Simple Counter Loop",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "int count = 0;\nfor (int i = 1; i <= 5; i++) {\n    if (i % 2 == 0) {\n        count += 2;\n    } else {\n        count++;\n    }\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "7", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "6", "correct": false}
                    ],
                    "explanation": "Odd numbers (1,3,5) add 1 each, even numbers (2,4) add 2 each: 1+2+1+2+1 = 7"
                },
                "python": {
                    "code": "count = 0\nfor i in range(1, 6):\n    if i % 2 == 0:\n        count += 2\n    else:\n        count += 1\nprint(count)",
                    "answers": [
                        {"text": "7", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "6", "correct": false}
                    ],
                    "explanation": "Odd numbers (1,3,5) add 1 each, even numbers (2,4) add 2 each: 1+2+1+2+1 = 7"
                },
                "javascript": {
                    "code": "let count = 0;\nfor (let i = 1; i <= 5; i++) {\n    if (i % 2 === 0) {\n        count += 2;\n    } else {\n        count++;\n    }\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "7", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "6", "correct": false}
                    ],
                    "explanation": "Odd numbers (1,3,5) add 1 each, even numbers (2,4) add 2 each: 1+2+1+2+1 = 7"
                }
            }
        },
        {
            "id": 3,
            "title": "Basic String Operations",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "String str = \"hello\";\nint count = 0;\nfor (char c : str.toCharArray()) {\n    if (c == 'l') count++;\n    if (c == 'o') count += 2;\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "4", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "2", "correct": false}
                    ],
                    "explanation": "Two 'l's add 1 each (2), one 'o' adds 2, total is 4"
                },
                "python": {
                    "code": "str = \"hello\"\ncount = 0\nfor c in str:\n    if c == 'l': count += 1\n    if c == 'o': count += 2\nprint(count)",
                    "answers": [
                        {"text": "4", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "2", "correct": false}
                    ],
                    "explanation": "Two 'l's add 1 each (2), one 'o' adds 2, total is 4"
                },
                "javascript": {
                    "code": "let str = \"hello\";\nlet count = 0;\nfor (let c of str) {\n    if (c === 'l') count++;\n    if (c === 'o') count += 2;\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "4", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "2", "correct": false}
                    ],
                    "explanation": "Two 'l's add 1 each (2), one 'o' adds 2, total is 4"
                }
            }
        },
        {
            "id": 4,
            "title": "Array Element Manipulation",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "int[] arr = {1, 2, 3, 4};\nfor (int i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[i-1]) {\n        arr[i] += arr[i-1];\n    } else {\n        arr[i] *= 2;\n    }\n}\nSystem.out.println(arr[2]);",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "6", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "Array transforms: [1,3,5,9] as each element adds previous if greater, arr[2] becomes 5"
                },
                "python": {
                    "code": "arr = [1, 2, 3, 4]\nfor i in range(1, len(arr)):\n    if arr[i] > arr[i-1]:\n        arr[i] += arr[i-1]\n    else:\n        arr[i] *= 2\nprint(arr[2])",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "6", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "Array transforms: [1,3,5,9] as each element adds previous if greater, arr[2] becomes 5"
                },
                "javascript": {
                    "code": "let arr = [1, 2, 3, 4];\nfor (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[i-1]) {\n        arr[i] += arr[i-1];\n    } else {\n        arr[i] *= 2;\n    }\n}\nconsole.log(arr[2]);",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "3", "correct": false},
                        {"text": "6", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "Array transforms: [1,3,5,9] as each element adds previous if greater, arr[2] becomes 5"
                }
            }
        },
        {
            "id": 5,
            "title": "Nested Loop Counter",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "int result = 0;\nfor (int i = 0; i < 3; i++) {\n    for (int j = i; j < 3; j++) {\n        if (i == j) result += 2;\n        else result++;\n    }\n}\nSystem.out.println(result);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "First loop: 2+1+1, Second loop: 2+1, Third loop: 2, Total = 9"
                },
                "python": {
                    "code": "result = 0\nfor i in range(3):\n    for j in range(i, 3):\n        if i == j:\n            result += 2\n        else:\n            result += 1\nprint(result)",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "First loop: 2+1+1, Second loop: 2+1, Third loop: 2, Total = 9"
                },
                "javascript": {
                    "code": "let result = 0;\nfor (let i = 0; i < 3; i++) {\n    for (let j = i; j < 3; j++) {\n        if (i === j) result += 2;\n        else result++;\n    }\n}\nconsole.log(result);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "First loop: 2+1+1, Second loop: 2+1, Third loop: 2, Total = 9"
                }
            }
        },
        {
            "id": 6,
            "title": "String Pattern Counter",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "String str = \"abcabc\";\nint count = 0;\nfor (int i = 1; i < str.length(); i++) {\n    if (str.charAt(i) == str.charAt(i-1)) {\n        count += 2;\n    } else if (str.charAt(i) == 'a') {\n        count++;\n    }\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "No consecutive letters, one 'a' at position 3 adds 1 to count"
                },
                "python": {
                    "code": "str = \"abcabc\"\ncount = 0\nfor i in range(1, len(str)):\n    if str[i] == str[i-1]:\n        count += 2\n    elif str[i] == 'a':\n        count += 1\nprint(count)",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "No consecutive letters, one 'a' at position 3 adds 1 to count"
                },
                "javascript": {
                    "code": "let str = \"abcabc\";\nlet count = 0;\nfor (let i = 1; i < str.length; i++) {\n    if (str[i] === str[i-1]) {\n        count += 2;\n    } else if (str[i] === 'a') {\n        count++;\n    }\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "4", "correct": false}
                    ],
                    "explanation": "No consecutive letters, one 'a' at position 3 adds 1 to count"
                }
            }
        },
        {
            "id": 7,
            "title": "Array Sliding Window Sum",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "int[] arr = {1, 2, 3, 4, 5};\nint windowSize = 2;\nint maxSum = 0;\nint currentSum = arr[0];\nfor (int i = 1; i < arr.length; i++) {\n    currentSum += arr[i];\n    if (i >= windowSize) {\n        currentSum -= arr[i - windowSize];\n    }\n    maxSum = Math.max(maxSum, currentSum);\n}\nSystem.out.println(maxSum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "Window sums: [3,5,7,9] as window slides, max is 9 (4+5)"
                },
                "python": {
                    "code": "arr = [1, 2, 3, 4, 5]\nwindow_size = 2\nmax_sum = 0\ncurrent_sum = arr[0]\nfor i in range(1, len(arr)):\n    current_sum += arr[i]\n    if i >= window_size:\n        current_sum -= arr[i - window_size]\n    max_sum = max(max_sum, current_sum)\nprint(max_sum)",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "Window sums: [3,5,7,9] as window slides, max is 9 (4+5)"
                },
                "javascript": {
                    "code": "let arr = [1, 2, 3, 4, 5];\nlet windowSize = 2;\nlet maxSum = 0;\nlet currentSum = arr[0];\nfor (let i = 1; i < arr.length; i++) {\n    currentSum += arr[i];\n    if (i >= windowSize) {\n        currentSum -= arr[i - windowSize];\n    }\n    maxSum = Math.max(maxSum, currentSum);\n}\nconsole.log(maxSum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "11", "correct": false}
                    ],
                    "explanation": "Window sums: [3,5,7,9] as window slides, max is 9 (4+5)"
                }
            }
        },
        {
            "id": 8,
            "title": "Pattern Matching Counter",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "String text = \"ababab\";\nint count = 0;\nint pattern = 0;\nfor (int i = 0; i < text.length(); i++) {\n    if (text.charAt(i) == 'a') {\n        pattern = 1;\n    } else if (pattern == 1 && text.charAt(i) == 'b') {\n        count++;\n        pattern = 0;\n    } else {\n        pattern = 0;\n    }\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts 'ab' patterns, finds 3 occurrences in 'ababab'"
                },
                "python": {
                    "code": "text = \"ababab\"\ncount = 0\npattern = 0\nfor char in text:\n    if char == 'a':\n        pattern = 1\n    elif pattern == 1 and char == 'b':\n        count += 1\n        pattern = 0\n    else:\n        pattern = 0\nprint(count)",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts 'ab' patterns, finds 3 occurrences in 'ababab'"
                },
                "javascript": {
                    "code": "let text = \"ababab\";\nlet count = 0;\nlet pattern = 0;\nfor (let char of text) {\n    if (char === 'a') {\n        pattern = 1;\n    } else if (pattern === 1 && char === 'b') {\n        count++;\n        pattern = 0;\n    } else {\n        pattern = 0;\n    }\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts 'ab' patterns, finds 3 occurrences in 'ababab'"
                }
            }
        },
        {
            "id": 9,
            "title": "Array Rotation Counter",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "int[] arr = {1, 2, 3, 4, 5};\nint rotations = 2;\nint sum = 0;\nfor (int i = 0; i < arr.length; i++) {\n    int newPos = (i + rotations) % arr.length;\n    if (newPos < i) {\n        sum += arr[i];\n    }\n}\nSystem.out.println(sum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "12", "correct": false},
                        {"text": "5", "correct": false}
                    ],
                    "explanation": "After 2 rotations, elements 4,5 move to front, sum of original positions (4+5=9)"
                },
                "python": {
                    "code": "arr = [1, 2, 3, 4, 5]\nrotations = 2\nsum = 0\nfor i in range(len(arr)):\n    new_pos = (i + rotations) % len(arr)\n    if new_pos < i:\n        sum += arr[i]\nprint(sum)",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "12", "correct": false},
                        {"text": "5", "correct": false}
                    ],
                    "explanation": "After 2 rotations, elements 4,5 move to front, sum of original positions (4+5=9)"
                },
                "javascript": {
                    "code": "let arr = [1, 2, 3, 4, 5];\nlet rotations = 2;\nlet sum = 0;\nfor (let i = 0; i < arr.length; i++) {\n    let newPos = (i + rotations) % arr.length;\n    if (newPos < i) {\n        sum += arr[i];\n    }\n}\nconsole.log(sum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "12", "correct": false},
                        {"text": "5", "correct": false}
                    ],
                    "explanation": "After 2 rotations, elements 4,5 move to front, sum of original positions (4+5=9)"
                }
            }
        },
        {
            "id": 10,
            "title": "Matrix Diagonal Sum",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\nint sum = 0;\nfor (int i = 0; i < matrix.length; i++) {\n    sum += matrix[i][i];\n    if (i != matrix.length-1-i) {\n        sum += matrix[i][matrix.length-1-i];\n    }\n}\nSystem.out.println(sum);",
                    "answers": [
                        {"text": "25", "correct": true},
                        {"text": "30", "correct": false},
                        {"text": "20", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums both diagonals (1+5+9) + (3+5+7), but counts center only once: 25"
                },
                "python": {
                    "code": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsum = 0\nfor i in range(len(matrix)):\n    sum += matrix[i][i]\n    if i != len(matrix)-1-i:\n        sum += matrix[i][len(matrix)-1-i]\nprint(sum)",
                    "answers": [
                        {"text": "25", "correct": true},
                        {"text": "30", "correct": false},
                        {"text": "20", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums both diagonals (1+5+9) + (3+5+7), but counts center only once: 25"
                },
                "javascript": {
                    "code": "let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nlet sum = 0;\nfor (let i = 0; i < matrix.length; i++) {\n    sum += matrix[i][i];\n    if (i !== matrix.length-1-i) {\n        sum += matrix[i][matrix.length-1-i];\n    }\n}\nconsole.log(sum);",
                    "answers": [
                        {"text": "25", "correct": true},
                        {"text": "30", "correct": false},
                        {"text": "20", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums both diagonals (1+5+9) + (3+5+7), but counts center only once: 25"
                }
            }
        },
        {
            "id": 11,
            "title": "Stack Operations Sequence",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "Stack<Integer> stack = new Stack<>();\nint result = 0;\nfor (int i = 1; i <= 3; i++) {\n    stack.push(i);\n    if (i % 2 == 0) {\n        result += stack.pop();\n    }\n}\nwhile (!stack.isEmpty()) {\n    result += stack.pop();\n}\nSystem.out.println(result);",
                    "answers": [
                        {"text": "6", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "3", "correct": false}
                    ],
                    "explanation": "Push 1,2,3; pop 2 during loop (result=2), then pop 3,1 at end (result=6)"
                },
                "python": {
                    "code": "stack = []\nresult = 0\nfor i in range(1, 4):\n    stack.append(i)\n    if i % 2 == 0:\n        result += stack.pop()\nwhile stack:\n    result += stack.pop()\nprint(result)",
                    "answers": [
                        {"text": "6", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "3", "correct": false}
                    ],
                    "explanation": "Push 1,2,3; pop 2 during loop (result=2), then pop 3,1 at end (result=6)"
                },
                "javascript": {
                    "code": "let stack = [];\nlet result = 0;\nfor (let i = 1; i <= 3; i++) {\n    stack.push(i);\n    if (i % 2 === 0) {\n        result += stack.pop();\n    }\n}\nwhile (stack.length > 0) {\n    result += stack.pop();\n}\nconsole.log(result);",
                    "answers": [
                        {"text": "6", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "3", "correct": false}
                    ],
                    "explanation": "Push 1,2,3; pop 2 during loop (result=2), then pop 3,1 at end (result=6)"
                }
            }
        },
        {
            "id": 12,
            "title": "Binary Number Pattern",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "int n = 5;\nint count = 0;\nint current = n;\nwhile (current > 0) {\n    if ((current & 1) == 1) {\n        count++;\n        if ((current & 2) == 2) count++;\n    }\n    current = current >> 1;\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "5 is 101 in binary, counts 1s and consecutive 1s: 1 at end, no consecutive pairs"
                },
                "python": {
                    "code": "n = 5\ncount = 0\ncurrent = n\nwhile current > 0:\n    if current & 1 == 1:\n        count += 1\n        if current & 2 == 2:\n            count += 1\n    current = current >> 1\nprint(count)",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "5 is 101 in binary, counts 1s and consecutive 1s: 1 at end, no consecutive pairs"
                },
                "javascript": {
                    "code": "let n = 5;\nlet count = 0;\nlet current = n;\nwhile (current > 0) {\n    if ((current & 1) === 1) {\n        count++;\n        if ((current & 2) === 2) count++;\n    }\n    current = current >> 1;\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "5 is 101 in binary, counts 1s and consecutive 1s: 1 at end, no consecutive pairs"
                }
            }
        },
        {
            "id": 13,
            "title": "Tree Level Traversal Sum",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "class Node {\n    int val;\n    Node left, right;\n    Node(int val) {\n        this.val = val;\n    }\n}\nNode root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.right.right = new Node(5);\n\nQueue<Node> queue = new LinkedList<>();\nqueue.offer(root);\nint sum = 0;\nint level = 0;\n\nwhile (!queue.isEmpty()) {\n    int size = queue.size();\n    for (int i = 0; i < size; i++) {\n        Node current = queue.poll();\n        if (level % 2 == 0) sum += current.val;\n        if (current.left != null) queue.offer(current.left);\n        if (current.right != null) queue.offer(current.right);\n    }\n    level++;\n}\nSystem.out.println(sum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "11", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums nodes at even levels: Level 0 (1) + Level 2 (4,5) = 1 + 4 + 4 = 9"
                },
                "python": {
                    "code": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.right.right = Node(5)\n\nqueue = [root]\nsum = 0\nlevel = 0\n\nwhile queue:\n    size = len(queue)\n    for _ in range(size):\n        current = queue.pop(0)\n        if level % 2 == 0:\n            sum += current.val\n        if current.left:\n            queue.append(current.left)\n        if current.right:\n            queue.append(current.right)\n    level += 1\n\nprint(sum)",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "11", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums nodes at even levels: Level 0 (1) + Level 2 (4,5) = 1 + 4 + 4 = 9"
                },
                "javascript": {
                    "code": "class Node {\n    constructor(val) {\n        this.val = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nlet root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.right.right = new Node(5);\n\nlet queue = [root];\nlet sum = 0;\nlet level = 0;\n\nwhile (queue.length > 0) {\n    let size = queue.length;\n    for (let i = 0; i < size; i++) {\n        let current = queue.shift();\n        if (level % 2 === 0) sum += current.val;\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n    }\n    level++;\n}\n\nconsole.log(sum);",
                    "answers": [
                        {"text": "9", "correct": true},
                        {"text": "7", "correct": false},
                        {"text": "11", "correct": false},
                        {"text": "15", "correct": false}
                    ],
                    "explanation": "Sums nodes at even levels: Level 0 (1) + Level 2 (4,5) = 1 + 4 + 4 = 9"
                }
            }
        },
        {
            "id": 14,
            "title": "Graph Path Counter",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "Map<Integer, List<Integer>> graph = new HashMap<>();\ngraph.put(0, Arrays.asList(1, 2));\ngraph.put(1, Arrays.asList(2, 3));\ngraph.put(2, Arrays.asList(3));\ngraph.put(3, new ArrayList<>());\n\nint target = 3;\nint[] pathCount = {0};\n\nvoid dfs(int node, Set<Integer> visited) {\n    if (node == target) {\n        pathCount[0]++;\n        return;\n    }\n    for (int next : graph.get(node)) {\n        if (!visited.contains(next)) {\n            visited.add(next);\n            dfs(next, visited);\n            visited.remove(next);\n        }\n    }\n}\n\nSet<Integer> visited = new HashSet<>();\nvisited.add(0);\ndfs(0, visited);\nSystem.out.println(pathCount[0]);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts unique paths from 0 to 3: 0→1→3, 0→2→3, and 0→1→2→3"
                },
                "python": {
                    "code": "graph = {\n    0: [1, 2],\n    1: [2, 3],\n    2: [3],\n    3: []\n}\n\ntarget = 3\npath_count = [0]\n\ndef dfs(node, visited):\n    if node == target:\n        path_count[0] += 1\n        return\n    for next_node in graph[node]:\n        if next_node not in visited:\n            visited.add(next_node)\n            dfs(next_node, visited)\n            visited.remove(next_node)\n\nvisited = {0}\ndfs(0, visited)\nprint(path_count[0])",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts unique paths from 0 to 3: 0→1→3, 0→2→3, and 0→1→2→3"
                },
                "javascript": {
                    "code": "const graph = {\n    0: [1, 2],\n    1: [2, 3],\n    2: [3],\n    3: []\n};\n\nconst target = 3;\nlet pathCount = 0;\n\nfunction dfs(node, visited) {\n    if (node === target) {\n        pathCount++;\n        return;\n    }\n    for (let next of graph[node]) {\n        if (!visited.has(next)) {\n            visited.add(next);\n            dfs(next, visited);\n            visited.delete(next);\n        }\n    }\n}\n\nconst visited = new Set([0]);\ndfs(0, visited);\nconsole.log(pathCount);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "4", "correct": false},
                        {"text": "1", "correct": false}
                    ],
                    "explanation": "Counts unique paths from 0 to 3: 0→1→3, 0→2→3, and 0→1→2→3"
                }
            }
        },
        {
            "id": 15,
            "title": "Dynamic Programming Pattern",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "int n = 4;\nint[][] dp = new int[n+1][n+1];\ndp[0][0] = 1;\n\nfor (int i = 0; i <= n; i++) {\n    for (int j = 0; j <= i; j++) {\n        if (j > 0) dp[i][j] += dp[i-1][j-1];\n        if (j < i) dp[i][j] += dp[i-1][j];\n    }\n}\n\nint result = 0;\nfor (int j = 0; j <= n; j++) {\n    if (j % 2 == 0) result += dp[n][j];\n}\nSystem.out.println(result);",
                    "answers": [
                        {"text": "8", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "10", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "Calculates Pascal's triangle pattern and sums even-indexed values in row 4: 1 + 4 + 3 = 8"
                },
                "python": {
                    "code": "n = 4\ndp = [[0]*(n+1) for _ in range(n+1)]\ndp[0][0] = 1\n\nfor i in range(n+1):\n    for j in range(i+1):\n        if j > 0:\n            dp[i][j] += dp[i-1][j-1]\n        if j < i:\n            dp[i][j] += dp[i-1][j]\n\nresult = sum(dp[n][j] for j in range(n+1) if j % 2 == 0)\nprint(result)",
                    "answers": [
                        {"text": "8", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "10", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "Calculates Pascal's triangle pattern and sums even-indexed values in row 4: 1 + 4 + 3 = 8"
                },
                "javascript": {
                    "code": "const n = 4;\nlet dp = Array(n+1).fill().map(() => Array(n+1).fill(0));\ndp[0][0] = 1;\n\nfor (let i = 0; i <= n; i++) {\n    for (let j = 0; j <= i; j++) {\n        if (j > 0) dp[i][j] += dp[i-1][j-1];\n        if (j < i) dp[i][j] += dp[i-1][j];\n    }\n}\n\nlet result = 0;\nfor (let j = 0; j <= n; j++) {\n    if (j % 2 === 0) result += dp[n][j];\n}\nconsole.log(result);",
                    "answers": [
                        {"text": "8", "correct": true},
                        {"text": "6", "correct": false},
                        {"text": "10", "correct": false},
                        {"text": "12", "correct": false}
                    ],
                    "explanation": "Calculates Pascal's triangle pattern and sums even-indexed values in row 4: 1 + 4 + 3 = 8"
                }
            }
        }
    ]
}