{
    "questions": [
        {
            "id": 1,
            "title": "Sum of Two Numbers",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "int a = 5, b = 10;\nSystem.out.println(a + b);",
                    "answers": [
                        {"text": "15", "correct": true},
                        {"text": "10", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code adds two numbers, 5 and 10, and prints the result."
                },
                "python": {
                    "code": "a, b = 5, 10\nprint(a + b)",
                    "answers": [
                        {"text": "15", "correct": true},
                        {"text": "10", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code adds two numbers, 5 and 10, and prints the result."
                },
                "javascript": {
                    "code": "let a = 5, b = 10;\nconsole.log(a + b);",
                    "answers": [
                        {"text": "15", "correct": true},
                        {"text": "10", "correct": false},
                        {"text": "5", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code adds two numbers, 5 and 10, and prints the result."
                }
            }
        },
        {
            "id": 2,
            "title": "Check Even or Odd",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "int num = 4;\nif (num % 2 == 0) System.out.println(\"Even\");\nelse System.out.println(\"Odd\");",
                    "answers": [
                        {"text": "Even", "correct": true},
                        {"text": "Odd", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 4 is even or odd using the modulus operator."
                },
                "python": {
                    "code": "num = 4\nprint(\"Even\" if num % 2 == 0 else \"Odd\")",
                    "answers": [
                        {"text": "Even", "correct": true},
                        {"text": "Odd", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 4 is even or odd using a ternary operator."
                },
                "javascript": {
                    "code": "let num = 4;\nconsole.log(num % 2 === 0 ? \"Even\" : \"Odd\");",
                    "answers": [
                        {"text": "Even", "correct": true},
                        {"text": "Odd", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 4 is even or odd using a ternary operator."
                }
            }
        },
        {
            "id": 3,
            "title": "Find Maximum of Two Numbers",
            "difficulty": 1,
            "variants": {
                "java": {
                    "code": "int a = 5, b = 10;\nSystem.out.println(Math.max(a, b));",
                    "answers": [
                        {"text": "10", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "15", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses Math.max() to find the maximum of two numbers, 5 and 10."
                },
                "python": {
                    "code": "a, b = 5, 10\nprint(max(a, b))",
                    "answers": [
                        {"text": "10", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "15", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses the max() function to find the maximum of two numbers, 5 and 10."
                },
                "javascript": {
                    "code": "let a = 5, b = 10;\nconsole.log(Math.max(a, b));",
                    "answers": [
                        {"text": "10", "correct": true},
                        {"text": "5", "correct": false},
                        {"text": "15", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses Math.max() to find the maximum of two numbers, 5 and 10."
                }
            }
        },
        {
            "id": 4,
            "title": "Linear Search",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "int[] arr = {1, 2, 3, 4, 5};\nint target = 3;\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] == target) {\n        System.out.println(\"Found at index \" + i);\n        break;\n    }\n}",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a linear search to find the target value 3 in the array."
                },
                "python": {
                    "code": "arr = [1, 2, 3, 4, 5]\ntarget = 3\nfor i, val in enumerate(arr):\n    if val == target:\n        print(f\"Found at index {i}\")\n        break",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a linear search to find the target value 3 in the list."
                },
                "javascript": {
                    "code": "let arr = [1, 2, 3, 4, 5];\nlet target = 3;\nfor (let i = 0; i < arr.length; i++) {\n    if (arr[i] === target) {\n        console.log(`Found at index ${i}`);\n        break;\n    }\n}",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a linear search to find the target value 3 in the array."
                }
            }
        },
        {
            "id": 5,
            "title": "Binary Search",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "int[] arr = {1, 2, 3, 4, 5};\nint target = 3;\nint left = 0, right = arr.length - 1;\nwhile (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (arr[mid] == target) {\n        System.out.println(\"Found at index \" + mid);\n        break;\n    }\n    if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n}",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a binary search to find the target value 3 in the sorted array."
                },
                "python": {
                    "code": "arr = [1, 2, 3, 4, 5]\ntarget = 3\nleft, right = 0, len(arr) - 1\nwhile left <= right:\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        print(f\"Found at index {mid}\")\n        break\n    elif arr[mid] < target:\n        left = mid + 1\n    else:\n        right = mid - 1",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a binary search to find the target value 3 in the sorted list."
                },
                "javascript": {
                    "code": "let arr = [1, 2, 3, 4, 5];\nlet target = 3;\nlet left = 0, right = arr.length - 1;\nwhile (left <= right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) {\n        console.log(`Found at index ${mid}`);\n        break;\n    }\n    if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n}",
                    "answers": [
                        {"text": "Found at index 2", "correct": true},
                        {"text": "Found at index 3", "correct": false},
                        {"text": "Not found", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code performs a binary search to find the target value 3 in the sorted array."
                }
            }
        },
        {
            "id": 6,
            "title": "Merge Two Sorted Arrays",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "int[] arr1 = {1, 3, 5};\nint[] arr2 = {2, 4, 6};\nint[] result = new int[arr1.length + arr2.length];\nint i = 0, j = 0, k = 0;\nwhile (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) result[k++] = arr1[i++];\n    else result[k++] = arr2[j++];\n}\nwhile (i < arr1.length) result[k++] = arr1[i++];\nwhile (j < arr2.length) result[k++] = arr2[j++];\nSystem.out.println(Arrays.toString(result));",
                    "answers": [
                        {"text": "[1, 2, 3, 4, 5, 6]", "correct": true},
                        {"text": "[1, 3, 5, 2, 4, 6]", "correct": false},
                        {"text": "[2, 4, 6, 1, 3, 5]", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted arrays into a single sorted array."
                },
                "python": {
                    "code": "arr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nresult = []\ni = j = 0\nwhile i < len(arr1) and j < len(arr2):\n    if arr1[i] < arr2[j]:\n        result.append(arr1[i])\n        i += 1\n    else:\n        result.append(arr2[j])\n        j += 1\nresult.extend(arr1[i:])\nresult.extend(arr2[j:])\nprint(result)",
                    "answers": [
                        {"text": "[1, 2, 3, 4, 5, 6]", "correct": true},
                        {"text": "[1, 3, 5, 2, 4, 6]", "correct": false},
                        {"text": "[2, 4, 6, 1, 3, 5]", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted lists into a single sorted list."
                },
                "javascript": {
                    "code": "let arr1 = [1, 3, 5];\nlet arr2 = [2, 4, 6];\nlet result = [];\nlet i = 0, j = 0;\nwhile (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) result.push(arr1[i++]);\n    else result.push(arr2[j++]);\n}\nwhile (i < arr1.length) result.push(arr1[i++]);\nwhile (j < arr2.length) result.push(arr2[j++]);\nconsole.log(result);",
                    "answers": [
                        {"text": "[1, 2, 3, 4, 5, 6]", "correct": true},
                        {"text": "[1, 3, 5, 2, 4, 6]", "correct": false},
                        {"text": "[2, 4, 6, 1, 3, 5]", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted arrays into a single sorted array."
                }
            }
        },
        {
            "id": 7,
            "title": "Implement a Stack",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "import java.util.Stack;\nStack<Integer> stack = new Stack<>();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nSystem.out.println(stack.pop());",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "1", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code implements a stack and pops the top element, which is 3."
                },
                "python": {
                    "code": "stack = []\nstack.append(1)\nstack.append(2)\nstack.append(3)\nprint(stack.pop())",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "1", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code implements a stack and pops the top element, which is 3."
                },
                "javascript": {
                    "code": "let stack = [];\nstack.push(1);\nstack.push(2);\nstack.push(3);\nconsole.log(stack.pop());",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "1", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code implements a stack and pops the top element, which is 3."
                }
            }
        },
        {
            "id": 8,
            "title": "Count Vowels in a String",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "String str = \"hello\";\nint count = 0;\nfor (char ch : str.toCharArray()) {\n    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n        count++;\n    }\n}\nSystem.out.println(count);",
                    "answers": [
                        {"text": "2", "correct": true},
                        {"text": "1", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code counts the number of vowels in the string 'hello'. The vowels are 'e' and 'o', so the count is 2."
                },
                "python": {
                    "code": "str = 'hello'\ncount = 0\nfor ch in str:\n    if ch in 'aeiou':\n        count += 1\nprint(count)",
                    "answers": [
                        {"text": "2", "correct": true},
                        {"text": "1", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code counts the number of vowels in the string 'hello'. The vowels are 'e' and 'o', so the count is 2."
                },
                "javascript": {
                    "code": "let str = 'hello';\nlet count = 0;\nfor (let ch of str) {\n    if ('aeiou'.includes(ch)) {\n        count++;\n    }\n}\nconsole.log(count);",
                    "answers": [
                        {"text": "2", "correct": true},
                        {"text": "1", "correct": false},
                        {"text": "3", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code counts the number of vowels in the string 'hello'. The vowels are 'e' and 'o', so the count is 2."
                }
            }
        },
        {
            "id": 9,
            "title": "Check for Palindrome",
            "difficulty": 2,
            "variants": {
                "java": {
                    "code": "String str = \"madam\";\nString reversed = new StringBuilder(str).reverse().toString();\nSystem.out.println(str.equals(reversed));",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the string 'madam' is a palindrome by comparing it to its reversed version."
                },
                "python": {
                    "code": "str = 'madam'\nreversed_str = str[::-1]\nprint(str == reversed_str)",
                    "answers": [
                        {"text": "True", "correct": true},
                        {"text": "False", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the string 'madam' is a palindrome by comparing it to its reversed version."
                },
                "javascript": {
                    "code": "let str = 'madam';\nlet reversed = str.split('').reverse().join('');\nconsole.log(str === reversed);",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the string 'madam' is a palindrome by comparing it to its reversed version."
                }
            }
        },
        {
            "id": 10,
            "title": "Find the Second Largest Number in an Array",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "int[] arr = {5, 1, 4, 2, 8};\nint first = Integer.MIN_VALUE, second = Integer.MIN_VALUE;\nfor (int num : arr) {\n    if (num > first) {\n        second = first;\n        first = num;\n    } else if (num > second && num != first) {\n        second = num;\n    }\n}\nSystem.out.println(second);",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code finds the second largest number in the array by iterating through it and updating the largest and second largest values."
                },
                "python": {
                    "code": "arr = [5, 1, 4, 2, 8]\nfirst = second = float('-inf')\nfor num in arr:\n    if num > first:\n        second, first = first, num\n    elif num > second and num != first:\n        second = num\nprint(second)",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code finds the second largest number in the list by iterating through it and updating the largest and second largest values."
                },
                "javascript": {
                    "code": "let arr = [5, 1, 4, 2, 8];\nlet first = -Infinity, second = -Infinity;\nfor (let num of arr) {\n    if (num > first) {\n        second = first;\n        first = num;\n    } else if (num > second && num !== first) {\n        second = num;\n    }\n}\nconsole.log(second);",
                    "answers": [
                        {"text": "5", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "8", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code finds the second largest number in the array by iterating through it and updating the largest and second largest values."
                }
            }
        },
        {
            "id": 11,
            "title": "Check if a Number is Prime",
            "difficulty": 3,
            "variants": {
                "java": {
                    "code": "int num = 29;\nboolean isPrime = true;\nfor (int i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i == 0) {\n        isPrime = false;\n        break;\n    }\n}\nSystem.out.println(isPrime);",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 29 is prime by testing divisibility up to the square root of the number."
                },
                "python": {
                    "code": "num = 29\nis_prime = True\nfor i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n        is_prime = False\n        break\nprint(is_prime)",
                    "answers": [
                        {"text": "True", "correct": true},
                        {"text": "False", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 29 is prime by testing divisibility up to the square root of the number."
                },
                "javascript": {
                    "code": "let num = 29;\nlet isPrime = true;\nfor (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n        isPrime = false;\n        break;\n    }\n}\nconsole.log(isPrime);",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code checks if the number 29 is prime by testing divisibility up to the square root of the number."
                }
            }
        },
        {
            "id": 12,
            "title": "Implement a Queue Using Stacks",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "import java.util.Stack;\nclass MyQueue {\n    Stack<Integer> stack1 = new Stack<>();\n    Stack<Integer> stack2 = new Stack<>();\n    void enqueue(int x) {\n        stack1.push(x);\n    }\n    int dequeue() {\n        if (stack2.isEmpty()) {\n            while (!stack1.isEmpty()) {\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.pop();\n    }\n}\nMyQueue queue = new MyQueue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nSystem.out.println(queue.dequeue());",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a queue using two stacks. The first element enqueued (1) is the first to be dequeued."
                },
                "python": {
                    "code": "class MyQueue:\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n    def enqueue(self, x):\n        self.stack1.append(x)\n    def dequeue(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\nqueue = MyQueue()\nqueue.enqueue(1)\nqueue.enqueue(2)\nprint(queue.dequeue())",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a queue using two stacks. The first element enqueued (1) is the first to be dequeued."
                },
                "javascript": {
                    "code": "class MyQueue {\n    constructor() {\n        this.stack1 = [];\n        this.stack2 = [];\n    }\n    enqueue(x) {\n        this.stack1.push(x);\n    }\n    dequeue() {\n        if (this.stack2.length === 0) {\n            while (this.stack1.length > 0) {\n                this.stack2.push(this.stack1.pop());\n            }\n        }\n        return this.stack2.pop();\n    }\n}\nlet queue = new MyQueue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nconsole.log(queue.dequeue());",
                    "answers": [
                        {"text": "1", "correct": true},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a queue using two stacks. The first element enqueued (1) is the first to be dequeued."
                }
            }
        },
        {
            "id": 13,
            "title": "Find the Longest Substring Without Repeating Characters",
            "difficulty": 4,
            "variants": {
                "java": {
                    "code": "String s = \"abcabcbb\";\nint maxLen = 0;\nint left = 0;\nSet<Character> set = new HashSet<>();\nfor (int right = 0; right < s.length(); right++) {\n    while (set.contains(s.charAt(right))) {\n        set.remove(s.charAt(left));\n        left++;\n    }\n    set.add(s.charAt(right));\n    maxLen = Math.max(maxLen, right - left + 1);\n}\nSystem.out.println(maxLen);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses a sliding window approach to find the length of the longest substring without repeating characters in the string 'abcabcbb'."
                },
                "python": {
                    "code": "s = 'abcabcbb'\nmax_len = 0\nleft = 0\nchar_set = set()\nfor right in range(len(s)):\n    while s[right] in char_set:\n        char_set.remove(s[left])\n        left += 1\n    char_set.add(s[right])\n    max_len = max(max_len, right - left + 1)\nprint(max_len)",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses a sliding window approach to find the length of the longest substring without repeating characters in the string 'abcabcbb'."
                },
                "javascript": {
                    "code": "let s = 'abcabcbb';\nlet maxLen = 0;\nlet left = 0;\nlet charSet = new Set();\nfor (let right = 0; right < s.length; right++) {\n    while (charSet.has(s[right])) {\n        charSet.delete(s[left]);\n        left++;\n    }\n    charSet.add(s[right]);\n    maxLen = Math.max(maxLen, right - left + 1);\n}\nconsole.log(maxLen);",
                    "answers": [
                        {"text": "3", "correct": true},
                        {"text": "4", "correct": false},
                        {"text": "2", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code uses a sliding window approach to find the length of the longest substring without repeating characters in the string 'abcabcbb'."
                }
            }
        },
        {
            "id": 14,
            "title": "Implement a Trie (Prefix Tree)",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "class TrieNode {\n    TrieNode[] children = new TrieNode[26];\n    boolean isEndOfWord;\n}\nclass Trie {\n    TrieNode root;\n    public Trie() {\n        root = new TrieNode();\n    }\n    public void insert(String word) {\n        TrieNode current = root;\n        for (char ch : word.toCharArray()) {\n            int index = ch - 'a';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEndOfWord = true;\n    }\n    public boolean search(String word) {\n        TrieNode current = root;\n        for (char ch : word.toCharArray()) {\n            int index = ch - 'a';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return current.isEndOfWord;\n    }\n}\nTrie trie = new Trie();\ntrie.insert(\"apple\");\nSystem.out.println(trie.search(\"apple\"));",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a Trie (Prefix Tree) and inserts the word 'apple'. The search function checks if 'apple' exists in the Trie."
                },
                "python": {
                    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        current = self.root\n        for ch in word:\n            if ch not in current.children:\n                current.children[ch] = TrieNode()\n            current = current.children[ch]\n        current.is_end_of_word = True\n    def search(self, word):\n        current = self.root\n        for ch in word:\n            if ch not in current.children:\n                return False\n            current = current.children[ch]\n        return current.is_end_of_word\ntrie = Trie()\ntrie.insert(\"apple\")\nprint(trie.search(\"apple\"))",
                    "answers": [
                        {"text": "True", "correct": true},
                        {"text": "False", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a Trie (Prefix Tree) and inserts the word 'apple'. The search function checks if 'apple' exists in the Trie."
                },
                "javascript": {
                    "code": "class TrieNode {\n    constructor() {\n        this.children = {};\n        this.isEndOfWord = false;\n    }\n}\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n    insert(word) {\n        let current = this.root;\n        for (let ch of word) {\n            if (!current.children[ch]) {\n                current.children[ch] = new TrieNode();\n            }\n            current = current.children[ch];\n        }\n        current.isEndOfWord = true;\n    }\n    search(word) {\n        let current = this.root;\n        for (let ch of word) {\n            if (!current.children[ch]) {\n                return false;\n            }\n            current = current.children[ch];\n        }\n        return current.isEndOfWord;\n    }\n}\nlet trie = new Trie();\ntrie.insert(\"apple\");\nconsole.log(trie.search(\"apple\"));",
                    "answers": [
                        {"text": "true", "correct": true},
                        {"text": "false", "correct": false},
                        {"text": "error", "correct": false},
                        {"text": "undefined", "correct": false}
                    ],
                    "explanation": "The code implements a Trie (Prefix Tree) and inserts the word 'apple'. The search function checks if 'apple' exists in the Trie."
                }
            }
        },
        {
            "id": 15,
            "title": "Find the Median of Two Sorted Arrays",
            "difficulty": 5,
            "variants": {
                "java": {
                    "code": "public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    int[] merged = new int[nums1.length + nums2.length];\n    int i = 0, j = 0, k = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            merged[k++] = nums1[i++];\n        } else {\n            merged[k++] = nums2[j++];\n        }\n    }\n    while (i < nums1.length) merged[k++] = nums1[i++];\n    while (j < nums2.length) merged[k++] = nums2[j++];\n    int mid = merged.length / 2;\n    if (merged.length % 2 == 0) {\n        return (merged[mid - 1] + merged[mid]) / 2.0;\n    } else {\n        return merged[mid];\n    }\n}\nint[] nums1 = {1, 3};\nint[] nums2 = {2};\nSystem.out.println(findMedianSortedArrays(nums1, nums2));",
                    "answers": [
                        {"text": "2.0", "correct": true},
                        {"text": "2.5", "correct": false},
                        {"text": "3.0", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted arrays and finds the median. For the input arrays [1, 3] and [2], the merged array is [1, 2, 3], and the median is 2.0."
                },
                "python": {
                    "code": "def findMedianSortedArrays(nums1, nums2):\n    merged = sorted(nums1 + nums2)\n    mid = len(merged) // 2\n    if len(merged) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]\nnums1 = [1, 3]\nnums2 = [2]\nprint(findMedianSortedArrays(nums1, nums2))",
                    "answers": [
                        {"text": "2.0", "correct": true},
                        {"text": "2.5", "correct": false},
                        {"text": "3.0", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted arrays and finds the median. For the input arrays [1, 3] and [2], the merged array is [1, 2, 3], and the median is 2.0."
                },
                "javascript": {
                    "code": "function findMedianSortedArrays(nums1, nums2) {\n    let merged = [...nums1, ...nums2].sort((a, b) => a - b);\n    let mid = Math.floor(merged.length / 2);\n    if (merged.length % 2 === 0) {\n        return (merged[mid - 1] + merged[mid]) / 2;\n    } else {\n        return merged[mid];\n    }\n}\nlet nums1 = [1, 3];\nlet nums2 = [2];\nconsole.log(findMedianSortedArrays(nums1, nums2));",
                    "answers": [
                        {"text": "2.0", "correct": true},
                        {"text": "2.5", "correct": false},
                        {"text": "3.0", "correct": false},
                        {"text": "error", "correct": false}
                    ],
                    "explanation": "The code merges two sorted arrays and finds the median. For the input arrays [1, 3] and [2], the merged array is [1, 2, 3], and the median is 2.0."
                }
            }
        }
    ]
}